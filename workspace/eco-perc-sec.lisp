(defun make-perc-sections (avg-num-events reject-min reject-max)
  (let ((t1 441.648)
	(t2 585.175))
    (let ((duration (- t2 t1)))
      (let ((x (labels ((rec (acc)
			  (let ((x (exponential (/ 1.0 (/ avg-num-events duration)))))
			    (if (and (>= x reject-min) (<= x reject-max))
				(if (>= (+ (car acc) x) t2)
				    (reverse acc)
				    (rec (cons (+ x (car acc)) acc)))
				(rec acc)))))
		 (rec (list t1)))))
	(plot x (make-list (length x) :initial-element 1))
	(format t "number of sections: ~A~%" (length x))
	(format t "min: ~A~%" (reduce 'min (mapcar #'- (cdr x) (butlast x))))
	(format t "max: ~A~%" (reduce 'max (mapcar #'- (cdr x) (butlast x))))
	(mapcar #'print (mapcar #'- (cdr x) (butlast x)))
	x))))


(defun make-seq (n
		 time-min
		 time-max
		 filename
		 &optional (filepath "/Users/john/jmac/compositions/ECO/workspace"))
  (let ((dat (read-list-from-file (format nil "~A/~A" filepath filename))))
    (let ((deinterleaved (deinterleave 3 dat)))
      (let ((filtered (mapcan #'(lambda (tt i s)
				  (when (and (>= tt time-min)
					     (<= tt time-max))
				    (list tt i s)))
			      (car deinterleaved)
			      (cadr deinterleaved)
			      (caddr deinterleaved))))
	(let ((deinterleaved (deinterleave 3 filtered)))	  
	  (let ((times (car deinterleaved))
		(instnames (cadr deinterleaved))
		(subdivs (caddr deinterleaved)))
	    (labels ((rec (instnames subdivs acc)
		       (if (null instnames)
			   (reverse acc)
			   (if (eq (car instnames) (cadr instnames))
			       (if (= (car subdivs) (cadr subdivs))
				   (rec (cdr instnames)
					(cdr subdivs)
					(cons (car acc) acc))
				   (rec (cdr instnames)
					(cdr subdivs)
					(cons (categorical (mapcar #'(lambda (i)
								       (if (= i (car acc))
									   0
									   1.0))
								   (arithm-seq (- n 1))))
					      acc)))
			       (rec (cdr instnames)
				    (cdr subdivs)
				    (cons (categorical (mapcar #'(lambda (i)
								   (if (= i (car acc))
								       0
								       1.0))
							       (arithm-seq (- n 1))))
					  acc))))))
	      (interleave (mapcar #'(lambda (s) (string-downcase (symbol-name s))) instnames)
			  times
			  (rec instnames subdivs (list (categorical (make-list n :initial-element 1.0))))))))))))

(defun plot-sec ()
  (gp-command (format nil "set xtics (~{~A~#[~:;, ~]~})" (arithm-seq 586 :min 441.68 :step 10)))
  (gp-command (format nil "set grid xtics"))
  (let ((x '(441.68 460.409698 462.612793 478.417145 479.968658 489.60495 494.115692 509.804138 516.728882 538.012329 541.15 550.992004 556.408997 568.2 574.090637 585.188965)))
    (gp-command (format nil "set x2tics (~{~A~#[~:;, ~]~})" x))
    (plot x (make-list (length x) :initial-element 1.0))))

(defun make-accents (n &optional (exponent 1.0))
  (labels ((rec (age acc)
	     (if (= (length acc) n)
		 (reverse acc)
		 (let ((r (categorical (list (expt (/ 1.0 age) exponent)))))
		   (if (= r 1)
		       (rec 1 (cons r acc))
		       (rec (1+ age) (cons r acc)))))))
    (rec 1 '())))

(defun pprint-accents (lst)
  (labels ((rec (lst i)
	     (when (not (null lst))
	       (when (= 0 (mod i 10))
		 (terpri))
	       (format t "~A: ~A~%" i (car lst))
	       (rec (cdr lst) (1+ i)))))
    (rec lst 0)))

		   

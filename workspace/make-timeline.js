var __filepath__ = "/Users/john/jmac/compositions/ECO/workspace";function addlayer(docref, name){	var l = docref.layers.add();	l.name = name;}function readfile(filepath){	var fileobj = File(filepath);	fileobj.open('r');	//while(!fileobj.eof){	var thisline = fileobj.readln();	if(thisline.charAt(thisline.length - 1) == " "){		//$.writeln("space");		thisline = thisline.substring(0, thisline.length - 1);	}	// if(thisline.charAt(thisline.length - 1) == "\n"){	// 	$.writeln("newline");	// }	return thisline.split(' ');	//}	fileobj.close()}function timeline(filepath, filename, paper_width_in, paper_height_in, paper_margins_in, time_min, time_max, time_ticks){	var docref = app.documents.add(DocumentColorSpace.RGB, inchestopoints(paper_width_in), inchestopoints(paper_height_in), 1, DocumentArtboardLayout.GridByRow, 0, 10);	var points = readfile(filepath + "/" + filename);	var times = new Array();	for(var i = 0; i < points.length / 4; i++){		if(points[i * 4] == 0 && points[(i * 4) + 2] <= time_max && points[(i * 4) + 2] >= time_min){			times[i] = points[(i * 4) + 2];		}	}	var start = inchestopoints(paper_margins_in);	var end = inchestopoints(paper_width_in - paper_margins_in);	var top = inchestopoints(paper_height_in - paper_margins_in);	var bottom = inchestopoints(paper_margins_in);	this.maketimeline = function()	{		var layer = addlayer(docref, "timeline");		var y = inchestopoints(paper_margins_in);		var ar = new Array(2);		ar[0] = new Array(start, y);		ar[1] = new Array(end, y);		var p = app.activeDocument.pathItems.add();		p.setEntirePath(ar);		return layer;	}	this.maketicks = function()	{		var layer = addlayer(docref, "ticks");		var n = Math.floor(((time_max - time_min) / time_ticks) + 1);		var y = inchestopoints(paper_margins_in);		for(var i = 0; i < n; i++){			var pos = scale(i * time_ticks, time_min, time_max, start, end);			var ar = new Array(2);			ar[0] = new Array(pos, y);			ar[1] = new Array(pos, y + 10);			app.activeDocument.pathItems.add().setEntirePath(ar);		}		return layer;	}	this.maketicklabels = function()	{		var layer = addlayer(docref, "ticklabels");		var n = Math.floor(((time_max - time_min) / time_ticks) + 1);		var y = inchestopoints(paper_margins_in);		for(var i = 0; i < n; i++){			var pos = scale(i * time_ticks, time_min, time_max, start, end);			var txt = docref.textFrames.add();			txt.contents = (i * time_ticks).toString();			txt.left = pos - 2;			txt.top = y - 3;			txt.textRange.characterAttributes.textFont = app.textFonts.getByName("Times-Roman");			txt.textRange.characterAttributes.size = 10;		}		return layer;	}	this.makesections = function()	{		var layer = addlayer(docref, "sections");		for(var i = 0; i < times.length; i++){			var ar = new Array(2);			var x = scale(times[i], time_min, time_max, start, end);			ar[0] = new Array(x, top);			ar[1] = new Array(x, bottom);			app.activeDocument.pathItems.add().setEntirePath(ar);		}		return layer;	}	this.makesectionlabels = function()	{		var layer = addlayer(docref, "sectionlabels");		var y = inchestopoints(paper_height_in - paper_margins_in);		for(var i = 0; i < times.length; i++){			var x = scale(times[i], time_min, time_max, start, end);			var txt = docref.textFrames.add();			txt.contents = (times[i]).toString();			txt.left = x + 4;			txt.top = y + 10;//y + 10 + ((i % 2) * 10);			txt.textRange.characterAttributes.textFont = app.textFonts.getByName("Times-Roman");			txt.textRange.characterAttributes.size = 10;			txt.orientation = TextOrientation.VERTICAL;		}		return layer;	}	this.fill = function(fill, colors)	{		for(var i = 0; i < fill.length; i++){			var layer = addlayer(docref, "fill" + fill[i]);			var left = scale(times[fill[i]], time_min, time_max, start, end);			var right = scale(times[fill[i] + 1], time_min, time_max, start, end);			var s = docref.pathItems.rectangle(top, left, right - left, top - bottom);			s.stroked = false;			s.filled = true;			s.fillColor = docref.swatches.getByName(colors[i]).color;			s.opacity = 25;		}	}}function main(){	var t = new timeline(__filepath__, "points.txt", 17, 11, 1, 0, 765, 60);	t.maketimeline();	t.maketicks();	t.maketicklabels();	t.makesections();	t.makesectionlabels();	t.fill(new Array(0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 15, 16, 17), new Array("RGB Green", "RGB Green", "RGB Blue", "RGB Blue", "RGB Blue", "Black", "Black", "Black", "Black", "Black", "Black", "Black", "Black"));}function inchestopoints(inches){	return inches * 72.0;}function scale(x, xmin, xmax, ymin, ymax){	var m = (ymax - ymin) / (xmax - xmin);	var b = ymin - (m * xmin);	return m * x + b;}main();
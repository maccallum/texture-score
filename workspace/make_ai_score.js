var __filepath__ = "/Users/john/git/jmac/compositions/string4tet/workspace";function addlayer(docref, name){	var l = docref.layers.add();	l.name = name;}function compute_center_line_pts(staffpos, pagenum, num_artboards_per_row, paper_height_in){	return inchestopoints(staffpos - (Math.floor(pagenum / num_artboards_per_row) * paper_height_in));}function score(inst_names,	       filepath,	       start_time_sec,	       duration_sec,	       num_seconds_per_system,	       staff_positions_in,	       num_systems_per_page,	       staff_space_height_pts,	       subdivs,	       make_beat_file_name_fn,	       make_subdiv_file_name_fn,	       paper_width_in,	       paper_height_in,	       paper_margins_in){	var inst_names = inst_names || alert("you must supply the names of the instruments\n");	var filepath = filepath || alert("you must supply the filepath\n");	var start_time_sec = start_time_sec >= 0 ? start_time_sec : alert("you must supply the minimum time\n");	var duration_sec = duration_sec || alert("you must supply the max time\n");	var num_seconds_per_system = num_seconds_per_system || 10;	var num_systems_per_page = num_systems_per_page || 1;	var paper_width_in = paper_width_in || 17;	var paper_height_in = paper_height_in || 11;	var paper_margins_in = paper_margins_in || 1;	var staff_positions_in = staff_positions_in || alert("you must supply the staff positions\n");//make_default_staff_positions_in(inst_names.length, paper_height_in);	var staff_space_height_pts = staff_space_height_pts || 4;	var subdivs = subdivs || new Array(3, 4, 5);	var make_beat_file_name_fn = make_beat_file_name_fn || function(inst){return inst + "_beats.txt";};	var make_subdiv_file_name_fn = make_subdiv_file_name_fn ||		function(inst, subdiv){return inst + "_subdivs_" + subdiv + ".txt";};	var num_artboards_per_row = 10;	var num_seconds_per_page = num_seconds_per_system * num_systems_per_page;	var npages = duration_sec / num_seconds_per_page;	//var docref = app.documents.add(DocumentColorSpace.RGB, 1224.0, 792.0, npages, DocumentArtboardLayout.GridByRow, 0, 10);	var docref = app.documents.add(DocumentColorSpace.RGB, inchestopoints(paper_width_in), inchestopoints(paper_height_in), npages, DocumentArtboardLayout.GridByRow, 0, 10);	app.defaultStroked = true;	var xoffset_in = .5;	var system_height = (paper_height_in - (2 * paper_margins_in)) / num_systems_per_page;	var beats_ar = new Array();	for(var i = 0; i < inst_names.length; i++){		var inst = inst_names[i];		beats_ar[inst] = readfile(__filepath__ + "/" + make_beat_file_name_fn(inst));	}	var subdiv_ar = new Array();	for(var i = 0; i < inst_names.length; i++){		var inst = inst_names[i];		var subdiv_inst = new Array();		for(var j = 0; j < subdivs.length; j++){			var subdiv = subdivs[j];			subdiv_inst[j] = readfile(__filepath__ + "/" + make_subdiv_file_name_fn(inst, subdiv));		}		subdiv_ar[inst] = subdiv_inst;	}	var points = readfile(__filepath__ + "/points.txt");//$.writeln(beats_ar['violin2'].length + " " + beats_ar['violin2'][0] + " " + (beats_ar['violin2'][beats_ar['violin2'].length - 1]) + beats_ar['violin2'][beats_ar['violin2'].length - 1].toString(16));	this.makestaves = function(){		var layer = addlayer(docref, "staves");		// staves		for(var pagenum = 0; pagenum < npages; pagenum++){			var start = inchestopoints((pagenum % num_artboards_per_row) * paper_width_in + paper_margins_in);			var end = start + inchestopoints(paper_width_in - (paper_margins_in * 2));			for(var systemnum = 0; systemnum < num_systems_per_page; systemnum++){				var yoffset = systemnum * system_height;				for(var instnum = 0; instnum < inst_names.length; instnum++){					var centerline = compute_center_line_pts(staff_positions_in[instnum] - yoffset, pagenum, num_artboards_per_row, paper_height_in);					for(var numspaces = 2; numspaces > -3; numspaces--){						var ar = new Array(2);						var y = centerline + (numspaces * staff_space_height_pts);						ar[0] = new Array(start, y);						ar[1] = new Array(end, y);						var p = app.activeDocument.pathItems.add();						p.setEntirePath(ar);					}						}				// system braces				var p = app.activeDocument.pathItems.add();				var ar = new Array(2);				ar[0] = new Array(start, compute_center_line_pts(staff_positions_in[0] - yoffset, pagenum, num_artboards_per_row, paper_height_in) + (2 * staff_space_height_pts));				ar[1] = new Array(start, compute_center_line_pts(staff_positions_in[inst_names.length - 1] - yoffset, pagenum, num_artboards_per_row, paper_height_in) - (2 * staff_space_height_pts));				p.setEntirePath(ar);				p = app.activeDocument.pathItems.add();				p.strokeWidth = 2.0;				ar = new Array(2);				ar[0] = new Array(start - 3, compute_center_line_pts(staff_positions_in[0] - yoffset, pagenum, num_artboards_per_row, paper_height_in) + (2 * staff_space_height_pts) + 2);				ar[1] = new Array(start - 3, compute_center_line_pts(staff_positions_in[inst_names.length - 1] - yoffset, pagenum, num_artboards_per_row, paper_height_in) - (2 * staff_space_height_pts) - 2);				p.setEntirePath(ar);				// wings on top and bottom of system braces				p = app.activeDocument.pathItems.add();				var pp = p.pathPoints.add();				var y = 2 + compute_center_line_pts(staff_positions_in[0] - yoffset, pagenum, num_artboards_per_row, paper_height_in) + (2 * staff_space_height_pts);				pp.anchor = new Array(start - 4, y);				pp.leftDirection = new Array(start - 4, y);				pp.rightDirection = new Array(start - 4, y);				pp = p.pathPoints.add();				pp.anchor = new Array(start + 5, y + 5);				pp.pointType = PointType.SMOOTH;				pp.leftDirection = new Array(start + 5, y);				pp.rightDirection = new Array(start + 5, y);//pp.rightDirection = new Array(start, y + 2);				// bottom				p = app.activeDocument.pathItems.add();				pp = p.pathPoints.add();				y = compute_center_line_pts(staff_positions_in[inst_names.length - 1] - yoffset, pagenum, num_artboards_per_row, paper_height_in) - (2 * staff_space_height_pts) - 2;				pp.anchor = new Array(start - 4, y);				pp.leftDirection = new Array(start - 4, y);				pp.rightDirection = new Array(start - 4, y);				pp = p.pathPoints.add();				pp.anchor = new Array(start + 5, y - 5);				pp.pointType = PointType.SMOOTH;				pp.leftDirection = new Array(start + 5, y);			}			pp.rightDirection = new Array(start + 5, y);//pp.rightDirection = new Array(start, y + 2);		}		return layer;	}	function compute_pos_for_time(t, staff_position_in){		var pageoffset_x = Math.floor(t / num_seconds_per_page) % num_artboards_per_row;		var system_offset = ((Math.floor((t / num_seconds_per_page) * num_systems_per_page) % num_systems_per_page) * system_height);		//$.writeln(t + " " + Math.floor(t % num_seconds_per_system) + " " + Math.floor(t % num_seconds_per_system) * system_height);		var pageoffset_y = Math.floor(t / (num_seconds_per_page * num_artboards_per_row));		var x = inchestopoints((paper_width_in * pageoffset_x) + xoffset_in + paper_margins_in + (((t % num_seconds_per_system) / num_seconds_per_system) * (paper_width_in - xoffset_in - (paper_margins_in * 2))));		var y = inchestopoints(staff_position_in - (pageoffset_y * paper_height_in) - system_offset);		return new Array(x, y);	}	this.makemarkers = function(start, stride, strokewidth){		for(var i = 0; i < inst_names.length; i++){			var inst = inst_names[i];			var beats = beats_ar[inst];			for(var j = start; j < beats.length; j += stride){ // file is a flat list of time, tempo, phase//$.writeln("i = " + i + " j = " + j + " t = " + beats[j] + " len = " + beats.length);				var t = beats[j];				var pos = compute_pos_for_time(t, staff_positions_in[i]);				//$.writeln("voice = " + i + " t = " + t + "x = " + pos[0] + "y = " + pos[1]);				var p = app.activeDocument.pathItems.add();				p.strokeWidth = strokewidth;				p.setEntirePath(new Array(new Array(pos[0], pos[1] + (2 * staff_space_height_pts)), new Array(pos[0], pos[1] - (2 * staff_space_height_pts))));			}		}	}	this.makebeats = function(){		var layer = addlayer(docref, "beats");		docref.defaultStrokeDashes = new Array(1., 1.);		this.makemarkers(0, 3, .5);		return layer;	}	this.makebarlines = function(){		var layer = addlayer(docref, "barlines");		docref.defaultStrokeDashes = new Array();		this.makemarkers(0, 12, 1);		return layer;	}	this.makebarnumbers = function(){		//var tf = app.textFonts;		//$.writeln("len: " + tf.getByName("Times-Roman"));		//return;		var layer = addlayer(docref, "barnumbers");		for(var i = 0; i < inst_names.length; i++){			var inst = inst_names[i];			var beats = beats_ar[inst];			var barnum = 1;			for(var j = 0; j < beats.length; j += 12){				var t = beats[j];				var pos = compute_pos_for_time(t, staff_positions_in[i]);				pos[1] = (pos[1]) + (2 * staff_space_height_pts) + 30;				var txt = docref.textFrames.add();				txt.contents = "" + barnum++;				//txt.anchor = pos;				txt.left = pos[0];				txt.top = pos[1];				txt.textRange.characterAttributes.textFont = app.textFonts.getByName("Times-Italic");				txt.textRange.characterAttributes.size = 10;			}		}		return layer;	}	this.maketempomarks = function(){		var layer = addlayer(docref, "tempomarks");		for(var i = 0; i < points.length; i += 4){			var func = points[i];			var point = points[i + 1];			var time = points[i + 2];			var tempo = points[i + 3];			var dir = "";			if(i + 4 < points.length){				if(points[i + 7] < tempo){					dir = "decel.";				}else if(points[i + 7] > tempo){					dir = "accel.";				}else{					dir = "hold";				}			}			var pos = compute_pos_for_time(time, staff_positions_in[func]);			pos[1] = (pos[1]) + (2 * staff_space_height_pts) + 40;			var txt = docref.textFrames.add();			txt.contents = point + ": " + (60.0 * tempo) + " (";			var len = txt.contents.length;			txt.contents = point + ": " + (60.0 * tempo) + " (" + dir + ")";			txt.left = pos[0];			txt.top = pos[1];			txt.textRange.characterAttributes.textFont = app.textFonts.getByName("Times-Roman");			txt.textRange.characterAttributes.size = 10;			//var words = txt.textRange.words;			//words[words.length - 1].characterAttributes.textFont = app.textFonts.getByName("Times-Italic");			for(var j = len; j < txt.contents.length; j++){				txt.characters[j].characterAttributes.textFont = app.textFonts.getByName("Times-Italic");			}		}	}	this.drawsubdivs = function(instruments){		var layer = addlayer(docref, "subdivs");		docref.defaultStrokeDashes = new Array();		var instruments = instruments || inst_names;		var dia = 2;		var dia2 = dia / 2;		for(var i = 0; i < instruments.length; i++){			var inst = instruments[i];			var staff_pos = staff_positions_in[i];			var subdiv_ar_inst = subdiv_ar[inst];			$.writeln(inst + " " + subdiv_ar_inst.length);			for(var j = 0; j < subdivs.length; j++){				var subdiv = subdivs[j];				var subdiv_dat = subdiv_ar_inst[j];				var subdiv_offset = ((((subdivs.length - 1) / 2) - j) * staff_space_height_pts);				//$.writeln("subdiv_offset = " + subdiv_offset);				for(var k = 0; k < subdiv_dat.length; k += 3){					var t = subdiv_dat[k];					//$.writeln(t);					var pos = compute_pos_for_time(t, staff_pos);					var p = docref.pathItems.ellipse(pos[1] + subdiv_offset + dia2,									 pos[0] - dia2, dia, dia);					p.filled = true;					p.stroked = false;					p.fillColor = docref.swatches.getByName("Black").color;					p.opacity = 40;				}			}		}		return layer;	}	this.drawapprox = function(filename, strokedashes, layername){		var layer = addlayer(docref, layername);		var ar = readfile(__filepath__ + "/" + filename);		var staffposin = new Array();		for(var i = 0; i < inst_names.length; i++){			staffposin[inst_names[i]] = staff_positions_in[i];		}		var subdivnums = new Array();		for(var i = 0; i < subdivs.length; i++){			subdivnums[subdivs[i]] = i;		}		for(var i = 0; i < inst_names.length; i++){			staffposin[inst_names[i]] = staff_positions_in[i];		}		var dia = 3;		var dia2 = dia / 2;		var pathpoints = new Array();		var j = 0;		var lasttime = 0		for(var i = 0; i < ar.length - 2; i += 3){			var t = ar[i];			var inst = ar[i + 1];			var subdiv = ar[i + 2];			var pos = compute_pos_for_time(t, staffposin[inst]);			var subdiv_offset = ((((subdivs.length - 1) / 2) - subdivnums[subdiv]) * staff_space_height_pts);			pos[1] += subdiv_offset;			var m = docref.pathItems.ellipse(pos[1] + dia2,							 pos[0] - dia2, dia, dia);			m.stroked = true;			m.filled = false;			m.strokeColor = docref.swatches.getByName("Black").color;			m.strokeWidth = 0.25;			if(pos[0] < lasttime){				var p = docref.pathItems.add();				p.setEntirePath(pathpoints);				p.filled = false;				p.strokeDashes = strokedashes;				p.strokeWidth = .5;				p.strokeColor = docref.swatches.getByName("Black").color;				p.opacity = 40;				pathpoints = [];				pathpoints.length = 0;				j = 0;			}else{			}			pathpoints[j++] = pos;			lasttime = pos[0];		}		if(pathpoints.length > 0){			var p = docref.pathItems.add();			p.setEntirePath(pathpoints);				p.filled = false;			p.strokeDashes = strokedashes;			p.strokeWidth = 1.;			p.strokeColor = docref.swatches.getByName("Black").color;			p.opacity = 40;		}	}	this.drawtimeline = function(distance_from_bottom_staff, layername){		var layer = addlayer(docref, layername);		for(var pagenum = 0; pagenum < npages; pagenum++){			var start = inchestopoints((pagenum % num_artboards_per_row) * paper_width_in + paper_margins_in);			var end = start + inchestopoints(paper_width_in - (paper_margins_in * 2));			for(var systemnum = 0; systemnum < num_systems_per_page; systemnum++){	        		var yoffset = systemnum * system_height;				var centerline = compute_center_line_pts(staff_positions_in[inst_names.length - 1] - distance_from_bottom_staff - yoffset, pagenum, num_artboards_per_row, paper_height_in);				var ar = new Array(2);				var y = centerline;// + (numspaces * staff_space_height_pts);				ar[0] = new Array(start, y);				ar[1] = new Array(end, y);				var p = app.activeDocument.pathItems.add();				p.setEntirePath(ar);			}				}		var timeline = staff_positions_in[inst_names.length - 1] - distance_from_bottom_staff;		for(var time = start_time_sec; time < duration_sec + start_time_sec; time += 1){			var pos = compute_pos_for_time(time, timeline);			var p = app.activeDocument.pathItems.add();			p.setEntirePath(new Array(pos, new Array(pos[0], pos[1] + 5)));			var txt = docref.textFrames.add();			txt.contents = time.toString();			txt.left = pos[0] - 2;			txt.top = pos[1] - 3;			txt.textRange.characterAttributes.textFont = app.textFonts.getByName("Times-Roman");			txt.textRange.characterAttributes.size = 10;		}		return layer;	}}function main(){	//var instruments = {'violin1':make_inst('violin1'), 'violin2':make_inst('violin2'), 'viola':make_inst('viola'), 'cello':make_inst('cello')};	var instruments = new Array('violin1', 'violin2', 'viola', 'cello', 'virtual1', 'virtual2', 'virtual3');	var staff_space = 1.; // inches	var ninst = instruments.length;	var centerlines = new Array(ninst);	var thiscenterline = 10; // top margin	for(var i = 0; i < ninst; i++){		thiscenterline -= staff_space;		centerlines[i] = thiscenterline;	}	var sc = new score(instruments, __filepath__, 0, 900, 10, centerlines, 1);	sc.makestaves();	sc.makebarlines();	sc.makebeats();	sc.makebarnumbers();	sc.maketempomarks();	sc.drawsubdivs(new Array('violin1', 'violin2', 'viola', 'cello'));	sc.drawapprox("virtual1_subdivs_4_approx.txt", new Array(2., 2.), "virtual1");    	sc.drawapprox("virtual2_subdivs_4_approx.txt", new Array(4., 2., 1., 2.), "virtual2");    	sc.drawapprox("virtual3_subdivs_4_approx.txt", new Array(4., 2., 1., 2., 1., 2.), "virtual3");	sc.drawtimeline(1, "timeline");}// function make_inst(name, beat_file, subdiv_files, filepath){//     filepath = filepath || __filepath__;//     beat_file = beat_file || make_beat_file_name(name);//     subdiv_files = subdiv_files || make_subdiv_file_names(name);//     this.name = name;//     this.beats = readfile(filepath + "/" + beat_file);//     this.subdivs = new Array();//     for(var i = 0; i < subdiv_files.length; i++){//         this.subdivs[i] = readfile(filepath + "/" + subdiv_files);//     }// }// function make_beat_file_name(inst){//      return inst + '_beats.txt';// }// function make_subdiv_file_names(inst, subdivs){//     subdivs = subdivs || new Array(3, 4, 5);//     var out = new Array();//     for(var i in subdivs){//         out.push(inst + '_subdivs_' + i + '.txt');//     }//     return out;// }function inchestopoints(inches){	return inches * 72.0;}function pointstoinches(pts){	return pts / 72.0;}function makepage(artboard, optional_args){	this.artboard = artboard;	//optional_args = optional_args || {};	//this.pagewidth_in = optional_args['pagewidth_in'] || 17;	//this.pagewidth_in = optional_args['pageheight_in'] || 11;	this.pagewidth_in = score.page_width_in;	this.pageheight_in = score.page_height_in;	this.artboard_spacing_pts = optional_args['artboard_spacing_pts'] || 0;}function readfile(filepath){	$.writeln(filepath);	var fileobj = File(filepath);	fileobj.open('r');	//while(!fileobj.eof){	var thisline = fileobj.readln();	if(thisline.charAt(thisline.length - 1) == " "){		//$.writeln("space");		thisline = thisline.substring(0, thisline.length - 1);	}	// if(thisline.charAt(thisline.length - 1) == "\n"){	// 	$.writeln("newline");	// }	return thisline.split(' ');	//}	fileobj.close()}main();//readfile("/Users/john/git/jmac/compositions/string4tet/workspace/violin2_beats.txt");//app.documents.add(DocumentColorSpace.RGB, 1224, 792, 100, DocumentArtboardLayout.GridByRow, 0, 10);